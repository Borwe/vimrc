snippet main "create void main function"
int main(){
	return 0;
}
endsnippet

snippet main_args "Main with args"
int main(int argc,char **argv){
	return 0;
}
endsnippet

snippet cout "print"
std::cout<<${0:"Print something"};
endsnippet

snippet class "Create a class"
class ${1:ClassName}{
private:
	//private variables
public:
	//public variables

	$1()=default;
	$1(const $1 &copy)=default;
	$1($1 &&move)=default;
	$1 &operator=(const $1 &copy)=default;
	$1 &operator=($1 &&move)=default;
	~$1();
};
endsnippet

snippet headers "Setup header file"
#ifndef ${1:SOME_CUSTOM_CHECKER}_CUSTOM
#define $1_CUSTOM

#endif
endsnippet

snippet boost_dyn "Dynamic Boost Testing"
#define BOOST_TEST_MODULE ${1:test_module_name}
#define BOOST_TEST_DYN_LINK
#include <boost/test/unit_test.hpp>

BOOST_AUTO_TEST_CASE(${2:case_name}){
	${0://write auto test}
}
endsnippet

snippet boost_header "Header only Boost Testing"
#define BOOST_TEST_MODULE ${1:test_module_name}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_CASE(${2:case_name}){
	${0://write auto test}
}
endsnippet

snippet boost_static "Static Boost Testing"
#define BOOST_TEST_MODULE ${1:test_module_name}
#include <boost/test/unit_test.hpp>

BOOST_AUTO_TEST_CASE(${2:case_name}){
	${0://write auto test}
}
endsnippet
